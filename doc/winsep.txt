*colorful-winsep*
|Currently in Neovim, we can not make the active window distinguishable via the window separator. This plugin will color the border of active window, like what tmux does for its different panes.|

*winsep.configuration*
>lua
 require("colorful-winsep").setup({
   highlight = {
     bg = "#16161E",
     fg = "#1F3442",
   },
   interval = 30,
   no_exec_files = { "packer", "TelescopePrompt", "mason", "CompetiTest", "NvimTree" },
   symbols = { "━", "┃", "┏", "┓", "┗", "┛" },
   close_event = function() end,
   create_event = function() end,
 })
<

*winsep.highlight* 
|highlight| is table,parameter is 'fg' and 'bg', default bg set Normal bg.


*winsep.interval* timer refresh rate


*winsep.no_exec_files*  This plugin will not be activated for filetype in the following table.
|no-exec_files| default
no_exec_files = { "packer", "TelescopePrompt", "mason", "CompetiTest" },


*winsep.symbols* Symbols for separator lines, the order: horizontal, vertical,
top left, top right, bottom left, bottom right.
default  { "━", "┃", "┏", "┓", "┗", "┛" }


*winsep.create_event* Executed after creating the window separator
example: this function When only two window automatically disable winsep
>lua
  function()
		local win_n = require("colorful-winsep.utils").calculate_number_windows()
		if win_n == 2 then
			winsep.NvimSeparatorDel()
    end
  end
<
*close_event*  Executed after closing the window separator callback

*winsep-api*

*winsep.NvimSeparatorDel* close current winsep

*winsep.NvimSeparatorShow* show current winsep (If the current window without creating winsep)




*winsep.utils*
use: require("colorful-winsep.utils")

|utils.calculate_number_windows()| 
Statistics of the current window number
it will filter out floating window to get the real number

|utils.can_create| parameter is |no_exec_files|
Check whether the current window can create winsep
returns boolean

|uilt.direction_have|
Check the direction if there is a window

example:
>lua
  local direction = { left = 'h', right = 'l', up = 'k', down = 'j' }
  local b = uilt.direction_have(direction.left)
  if (b) then
    print "left have win"
  else
    print "right not have win"
  end
<
